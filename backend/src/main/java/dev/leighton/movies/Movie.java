package dev.leighton.movies;

import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.DocumentReference;

/**
 * This class represents a Movie entity in the application.
 * It defines the data structure for movie information and maps to documents
 * in the "movies" collection in MongoDB.
 */
@Document(collection = "movies") // Specifies the MongoDB collection name this class maps to
@Data // Lombok annotation that automatically generates getters, setters, toString, equals, and hashCode methods
@AllArgsConstructor // Lombok annotation that generates a constructor with all arguments
@NoArgsConstructor // Lombok annotation that generates a no-args constructor required by MongoDB
public class Movie {

  /**
   * The primary key generated by MongoDB.
   * ObjectId is MongoDB's default type for primary keys.
   */
  @Id // Marks this field as the primary identifier for MongoDB documents
  private ObjectId Id;

  /**
   * The IMDb identifier for the movie.
   * This provides a unique external reference to the movie from IMDb database.
   */
  private String imdbId;

  /**
   * The title of the movie.
   */
  private String title;

  /**
   * The release date of the movie.
   * Stored as a String rather than Date for flexibility in format.
   */
  private String releaseDate;

  /**
   * URL link to the movie's trailer.
   */
  private String trailerLink;

  /**
   * URL or path to the movie's poster image.
   */
  private String poster;

  /**
   * List of genre names that categorize this movie.
   */
  private List<String> genres;

  /**
   * List of URLs or paths to backdrop images for the movie.
   * These are typically used for UI elements like banners or backgrounds.
   */
  private List<String> backdrops;

  /**
   * References to Review documents associated with this movie.
   * @DocumentReference creates a relationship between Movie and Review documents
   * allowing MongoDB to store just the IDs in the Movie document but retrieve
   * the full Review objects when needed (similar to SQL JOIN).
   */
  @DocumentReference
  private List<Review> reviewIds;

  /**
   * Custom constructor that allows creating a Movie without specifying the ID or reviews.
   * This is useful when creating a new Movie instance before saving it to the database,
   * as MongoDB will generate the ID, and reviews may be added later.
   *
   * @param imdbId The IMDb identifier for the movie
   * @param title The title of the movie
   * @param releaseDate The release date of the movie
   * @param trailerLink URL link to the movie's trailer
   * @param poster URL or path to the movie's poster image
   * @param backdrops List of URLs or paths to backdrop images
   * @param genres List of genre names for the movie
   */
  public Movie(
    String imdbId,
    String title,
    String releaseDate,
    String trailerLink,
    String poster,
    List<String> backdrops,
    List<String> genres
  ) {
    this.imdbId = imdbId;
    this.title = title;
    this.releaseDate = releaseDate;
    this.trailerLink = trailerLink;
    this.poster = poster;
    this.backdrops = backdrops;
    this.genres = genres;
  }
}
